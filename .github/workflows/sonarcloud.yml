name: SonarQube CI/CD (.NET + SonarCloud + Coverage + Artifact)

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test, Analyze, Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup JDK (SonarCloud requirement)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Install .NET tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:nhat-trieu_devops \
            /o:nhat-trieu \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.token=$SONAR_TOKEN \
            /d:sonar.coverageReportPaths=coverage/SonarQube.xml \
            /d:sonar.sources=Project_BanSach \
            /d:sonar.tests=Project_BanSach.Tests \
            /d:sonar.inclusions=**/*.cs \
            /d:sonar.exclusions=**/*.cshtml \
            /d:sonar.coverage.exclusions=**/Migrations/*.cs \
            /d:sonar.scanner.scanAll=false

      - name: Build project
        run: dotnet build Project_BanSach.sln --no-incremental

      - name: Run unit tests with coverage
        run: dotnet test Project_BanSach.sln --collect:"XPlat Code Coverage"

      - name: Convert coverage to SonarQube format
        run: |
          reportgenerator \
            -reports:**/coverage.cobertura.xml \
            -targetdir:coverage \
            -reporttypes:SonarQube

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Publish .NET App
        run: dotnet publish Project_BanSach/Project_BanSach.csproj -c Release -o ./publish

      - name: Zip artifact
        run: zip -r app.zip ./publish

      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./app.zip
